/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/Leden/CreateTable": {
    post: {
      parameters: {
        query: {
          /** Dummy records aanmaken */
          FILLDATA: boolean;
        };
      };
      responses: {
        /** Aangemaakt, Tabel toegevoegd */
        201: unknown;
        /** Data verwerkingsfout, bijv omdat de tabel al bestaat */
        500: unknown;
      };
    };
  };
  "/Leden/CreateViews": {
    post: {
      responses: {
        /** Aangemaakt, View toegevoegd */
        201: unknown;
        /** Data verwerkingsfout, view niet aangemaak */
        500: unknown;
      };
    };
  };
  "/Leden/GetObject": {
    get: {
      parameters: {
        query: {
          /** Database ID van het lid record */
          ID: number;
        };
      };
      responses: {
        /** OK, data succesvol opgehaald */
        200: {
          content: {
            "application/json": components["schemas"]["ref_leden"];
          };
        };
        /** Data niet gevonden */
        404: unknown;
        /** Methode niet toegestaan, input validatie error */
        405: unknown;
        /** Niet aanvaardbaar, input ontbreekt */
        406: unknown;
        /** Data verwerkingsfout, bijv onjuiste veldwaarde (string ipv integer) */
        500: unknown;
      };
    };
  };
  "/Leden/GetObjects": {
    get: {
      parameters: {
        query: {
          /** Database ID van het aanwezig record */
          ID?: number;
          /** Toon welke records verwijderd zijn. Default = false */
          VERWIJDERD?: boolean;
          /** Laatste aanpassing op basis van records in dataset. Bedoeld om data verbruik te verminderen. Dataset is daarom leeg */
          LAATSTE_AANPASSING?: boolean;
          /** HASH van laatste GetObjects aanroep. Indien bij nieuwe aanroep dezelfde data bevat, dan volgt http status code 304. In geval dataset niet hetzelfde is, dan komt de nieuwe dataset terug. Ook bedoeld om dataverbruik te vermindereren. Er wordt alleen data verzonden als het nodig is. */
          HASH?: string;
          /** Sortering van de velden in ORDER BY formaat. Default = NAAM */
          SORT?: string;
          /** Maximum aantal records in de dataset. Gebruikt in LIMIT query */
          MAX?: number;
          /** Eerste record in de dataset. Gebruikt in LIMIT query */
          START?: number;
          /** Welke velden moet opgenomen worden in de dataset */
          VELDEN?: string;
          /** Zoek in de NAAM, TELEFOON, MOBIEL, NOODNUMMER, EMAIL */
          SELECTIE?: string;
          /** Meerdere lid database IDs in CSV formaat */
          IN?: string;
          /** Zoek op een of meerder lid types. Types als CSV formaat */
          TYPES?: string;
          /** Wanneer 'true', toon alleen de leden */
          CLUBLEDEN?: boolean;
          /** Wanneer 'true', toon alleen de instructeurs */
          INSTRUCTEURS?: boolean;
          /** Wanneer 'true', toon alleen de DDWV crew */
          DDWV_CREW?: boolean;
          /** Wanneer 'true', toon alleen de lieristen */
          LIERISTEN?: boolean;
          /** Wanneer 'true', toon alleen de startleiders */
          STARTLEIDERS?: boolean;
        };
      };
      responses: {
        /** OK, data succesvol opgehaald */
        200: {
          content: {
            "application/json": components["schemas"]["view_leden"];
          };
        };
        /** Data niet gemodificeerd, HASH in aanroep == hash in dataset */
        304: never;
        /** Methode niet toegestaan, input validatie error */
        405: unknown;
        /** Data verwerkingsfout, bijv onjuiste veldwaarde (string ipv integer) */
        500: unknown;
      };
    };
  };
  "/Leden/DeleteObject": {
    delete: {
      parameters: {
        query: {
          /** Database ID van het lid record. Meerdere ID's in CSV formaat */
          ID: string;
          /** Controleer of record bestaat voordat het verwijderd wordt. Default = true */
          VERIFICATIE?: boolean;
        };
      };
      responses: {
        /** Lid verwijderd */
        204: never;
        /** Niet geautoriseerd, geen schrijfrechten */
        401: unknown;
        /** Data niet gevonden */
        404: unknown;
        /** Methode niet toegestaan, input validatie error */
        405: unknown;
        /** Niet aanvaardbaar, input ontbreekt */
        406: unknown;
        /** Data verwerkingsfout, bijv onjuiste veldwaarde (string ipv integer) */
        500: unknown;
      };
    };
  };
  "/Leden/RestoreObject": {
    patch: {
      parameters: {
        query: {
          /** Database ID van het record. Meerdere ID's in CSV formaat */
          ID: string;
        };
      };
      responses: {
        /** Record(s) hersteld */
        202: unknown;
        /** Niet geautoriseerd, geen schrijfrechten */
        401: unknown;
        /** Data niet gevonden */
        404: unknown;
        /** Methode niet toegestaan, input validatie error */
        405: unknown;
        /** Niet aanvaardbaar, input ontbreekt */
        406: unknown;
        /** Data verwerkingsfout, bijv onjuiste veldwaarde (string ipv integer) */
        500: unknown;
      };
    };
  };
  "/Leden/UploadAvatar": {
    post: {
      parameters: {
        query: {
          /** Database ID van het lid record */
          ID: number;
          /** Afbeelding ('gif','jpg','jpe','jpeg','png') */
          FILE: string;
        };
      };
      responses: {
        /** OK, avatar succesvol opgeslagen */
        200: {
          content: {
            "application/json": string;
          };
        };
        /** Lid ID niet gevonden */
        404: unknown;
        /** Methode niet toegestaan, input validatie error */
        405: unknown;
        /** Ongeldige bestand extentie */
        422: unknown;
        /** Data verwerkingsfout, bijv onjuiste veldwaarde (string ipv integer) */
        500: unknown;
      };
    };
  };
  "/Leden/SaveObject": {
    put: {
      responses: {
        /** OK, data succesvol aangepast */
        200: {
          content: {
            "application/json": components["schemas"]["ref_leden"];
          };
        };
        /** Niet geautoriseerd, geen schrijfrechten */
        401: unknown;
        /** Data niet gevonden */
        404: unknown;
        /** Methode niet toegestaan, input validatie error */
        405: unknown;
        /** Niet aanvaardbaar, input ontbreekt */
        406: unknown;
        /** Conflict, lidnummer bestaat al */
        409: unknown;
        /** Data verwerkingsfout, bijv onjuiste veldwaarde (string ipv integer) */
        500: unknown;
      };
      /** lid data */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ref_leden_in"];
        };
      };
    };
    post: {
      responses: {
        /** OK, data succesvol toegevoegd */
        200: {
          content: {
            "application/json": components["schemas"]["ref_leden"];
          };
        };
        /** Niet geautoriseerd, geen schrijfrechten */
        401: unknown;
        /** Methode niet toegestaan, input validatie error */
        405: unknown;
        /** Niet aanvaardbaar, input ontbreekt */
        406: unknown;
        /** Conflict, lidnummer bestaat al */
        409: unknown;
        /** Data verwerkingsfout, bijv onjuiste veldwaarde (string ipv integer) */
        500: unknown;
      };
      /** lid data */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ref_leden_in"];
        };
      };
    };
  };
}

export interface components {
  schemas: {
    ref_leden_in: {
      /** Database ID van het lid record */
      ID?: number;
      /** De volledige naam van het lid */
      NAAM?: string;
      /** De voornaam van het lid */
      VOORNAAM?: string;
      /** De tussenvoegsel van het lid */
      TUSSENVOEGSEL?: string;
      /** De achternaam van het lid zonder tussenvoegsels */
      ACHTERNAAM?: string;
      /** Het (post) adres waar het lid woont */
      ADRES?: string;
      /** De postcode die bij het adres hoort */
      POSTCODE?: string;
      /** De plaatsnaam */
      WOONPLAATS?: string;
      /** Telefoon nummer van het lid */
      TELEFOON?: string;
      /** Mobiel telefoon nummer van het lid */
      MOBIEL?: string;
      /** Het telefoonnummer van een naaste, kan gebruikt worden in noodgevallen */
      NOODNUMMER?: string;
      /** email adres van het lid */
      EMAIL?: string;
      /** url naar avatar */
      AVATAR?: string;
      /** Het lidnummer zoals dat in de leden administratie bekend is */
      LIDNR?: string;
      /** Het soort lid (jeugdlid, lid, donateur). Verwijzing naar type tabel */
      LIDTYPE_ID?: number;
      /** De vliegstatus van het lid (DBO, solist, brevethouder), NULL indien niet van toepassing */
      STATUSTYPE_ID?: number;
      /** Zusterclub lidmaatschap van lid. Nodig voor DDWV. */
      ZUSTERCLUB_ID?: number;
      /** Buddy van de vlieger, leeftijdsbeleid */
      BUDDY_ID?: number;
      /** Mag dit lid lieren? */
      LIERIST?: boolean;
      /** Kan dit lid het startbedrijf leiden? */
      STARTLEIDER?: boolean;
      /** Heeft dit lid een instructie bevoegdheid? */
      INSTRUCTEUR?: boolean;
      /** Heeft dit lid een instructie bevoegdheid? */
      CIMT?: boolean;
      /** Werkt dit lid mee in het DDWV bedrijf */
      DDWV_CREW?: boolean;
      /** Is dit lid de beheerder van het DDWV bedrijf, heeft toegang tot DDWV gerelateede data */
      DDWV_BEHEERDER?: boolean;
      /** Is dit lid de beheerder van deze omgeving, heeft toegang tot alles */
      BEHEERDER?: boolean;
      /** Dit account wordt gebruikt om starts in de start toren in te voeren */
      STARTTOREN?: boolean;
      /** Is dit lid  belast met het maken van roosters */
      ROOSTER?: boolean;
      /** Is dit lid ook een sleepvlieger */
      SLEEPVLIEGER?: boolean;
      /** Moet clubblad per post verstuurd worden */
      CLUBBLAD_POST?: boolean;
      /** Heeft lid toegang tot alle starts / logboeken voor rapportage */
      RAPPORTEUR?: boolean;
      /** Verloopdatum van het medical */
      MEDICAL?: string;
      /** Geboorte datum van het lid */
      GEBOORTE_DATUM?: string;
      /** De inlognaam van het lid */
      INLOGNAAM?: string;
      /** Het geheime password, bij ophalen van data altijd "****". Wachtwoord wordt als hash opgeslagen in de database */
      WACHTWOORD?: string;
      /** Wachtwoord in Helios hash formaat. Data wordt direct in database opgeslagen zonder encryptie, dat is namelijk al gebeurd. Alleen van toepassing voor SaveObject, komt dus niet terug in GetObject of GetObjects */
      WACHTWOORD_HASH?: string;
      /** 2Factor authenticatie voor deze gebruiker */
      AUTH?: boolean;
      /** Heef het lid de factuur van dit jaar betaald? */
      HEEFT_BETAALD?: boolean;
      /** Staat privacy mode (AVG / GDPR) uit/aan */
      PRIVACY?: boolean;
      /** Het serienummner van sleutel 1 (GeZC) */
      SLEUTEL1?: string;
      /** Het serienummner van sleutel 2 (SNZT) */
      SLEUTEL2?: string;
      /** Het lidmaatschapsnummer van de KNVVL */
      KNVVL_LIDNUMMER?: string;
      /** Het nummer van het brevet */
      BREVET_NUMMER?: string;
      /** Extra text om opmerkingen toe te voegen */
      OPMERKINGEN?: string;
    };
    ref_leden: components["schemas"]["ref_leden_in"] & {
      /** Readonly, **** voor gewone gebruikers, URL om QRcode op te halen voor beheerders */
      SECRET?: string;
      /** Is dit record gemarkeerd als verwijderd? */
      VERWIJDERD?: boolean;
      /** Tijdstempel van laaste aanpassing in de database */
      LAATSTE_AANPASSING?: string;
    };
    view_leden_dataset: components["schemas"]["ref_leden"] & {
      /** Heeft lid PAX competentie behaald */
      PAX?: boolean;
      /** Lidtype in text */
      LIDTYPE?: string;
      /** Vliegstatus, zoals DBO, Solist of Brevethouder */
      STATUS?: string;
      /** Naam van de zusterclub */
      ZUSTERCLUB?: string;
      /** Naam van de buddy */
      BUDDY?: string;
    };
    view_leden: {
      /** Aantal records dat voldoet aan de criteria in de database */
      totaal?: number;
      /** Tijdstempel van laaste aanpassing in de database van de records dat voldoet aan de criteria */
      laatste_aanpassing?: string;
      /** hash van de dataset */
      hash?: string;
      /** De dataset met records */
      dataset?: components["schemas"]["view_leden_dataset"][];
    };
  };
}

export interface operations {}
